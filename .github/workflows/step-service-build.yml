# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build And Push Step Service

on:
  workflow_call:
    inputs:
      epoch:
        required: false
        default: 1
        description: 'The major version number of the step-service.'
        type: number
      repo-name:
        required: false
        description: 'The name of the repository.'
        type: string
      python-version:
        required: false
        description: 'The version of python used in build.'
        default: '3.10'
        type: string
    secrets:
      gcp-credentials:
        required: true
        description: 'The path to the GCP credentials file.'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
    - name: LFS Checkout
      run: git lfs checkout
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '${{ inputs.python-version }}'
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 app --exclude __pycache__ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 app --exclude __pycache__ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Authenticate to Google Cloud
      id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.gcp-credentials }}'
    - name: Setup Google Cloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: 't0-prod'
        skip_install: true
    - name: Setup Docker
      run: |-
        gcloud --quiet auth configure-docker
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3
    - id: docker-name-step
      name: 'Derive Docker Name'
      uses: 'ymeadows/github-actions-public/.github/actions/derive-docker-name@main'
      with:
        repo-name: ${{ inputs.repo-name }}
    - name: Generate OpenAPI file with Python 3.12
      id: generate-openai3_12
      uses: ymeadows/fastapi-openapi-specs-action@python3.12
      if: ${{ inputs.python-version == '3.12' }}
      continue-on-error: true
      with:
        moduleDir: app
        outputExtension: json
    - name: Generate OpenAPI file with Python 3.11
      id: generate-openai3_11
      uses: ymeadows/fastapi-openapi-specs-action@python3.11
      if: ${{ inputs.python-version != '3.12' }}
      continue-on-error: true
      with:
        moduleDir: app
        outputExtension: json
    - name: Fallback openapi.json
      if: ${{ steps.generate-openai3_11.outcome != 'success' && steps.generate-openai3_12.outcome != 'success' }}
      run: echo "{}" > openapi.json
    - name: Get openapi.json
      id: openapi
      run: echo "json=$(cat openapi.json)" >> $GITHUB_OUTPUT
    - name: Get first commit committer email
      id: get-author
      run: |
        FULL_EMAIL=$(git log --format='%ae' $(git rev-list --max-parents=0 HEAD))
        USERNAME=$(echo $FULL_EMAIL | cut -d'@' -f1)
        echo "author=$USERNAME" >> $GITHUB_OUTPUT
    - name: Build Docker Image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        pull: true
        load: true
        tags: gcr.io/t0-prod/${{ steps.docker-name-step.outputs.docker-name }}:${{ inputs.epoch }}.${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        labels: |
          com.ymeadows.openapi=${{ steps.openapi.outputs.json }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.authors=${{ steps.get-author.outputs.author }}
    - name: Default Trivy configuration
      id: trivy-default-configuration
      run: |
        echo "dirs-to-ignore=/opt/bitnami/python/lib/python${{ inputs.python-version }}/site-packages" >> $GITHUB_OUTPUT
    - name: Load Trivy configuration
      id: trivy-configuration
      run: |
        if [ -f scan-files-to-ignore.txt ]; then echo "files-to-ignore=$(cat scan-files-to-ignore.txt)" >> $GITHUB_OUTPUT; fi
        if [ -f scan-dirs-to-ignore.txt ]; then echo "dirs-to-ignore=$(cat scan-dirs-to-ignore.txt)" >> $GITHUB_OUTPUT; fi
    - id: write-global-trivyignore
      name: Write Global Trivy Ignore
      uses: DamianReeves/write-file-action@master
      with:
        path: .trivyignore
        contents: |
          # Fixed version not yet available in Debian
          CVE-2023-5981
          CVE-2024-0567
          # Python 3.11.9 is not available yet
          CVE-2023-6597
          CVE-2024-0450
          # We are not using Windows
          CVE-2024-4030
          # IP Private Address Space does not impact us
          CVE-2024-4032
        write-mode: append
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'gcr.io/t0-prod/${{ steps.docker-name-step.outputs.docker-name }}:${{ inputs.epoch }}.${{ github.run_number }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os'
        skip-files: ${{ steps.trivy-configuration.outputs.files-to-ignore }}
        skip-dirs: ${{ steps.trivy-default-configuration.outputs.dirs-to-ignore }},${{ steps.trivy-configuration.outputs.dirs-to-ignore }}
    - name: Push Docker Image
      id: docker-push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          gcr.io/t0-prod/${{ steps.docker-name-step.outputs.docker-name }}:${{ github.sha }}
          gcr.io/t0-prod/${{ steps.docker-name-step.outputs.docker-name }}:latest
          gcr.io/t0-prod/${{ steps.docker-name-step.outputs.docker-name }}:${{ inputs.epoch }}.${{ github.run_number }}
          gcr.io/t0-qa-282516/${{ steps.docker-name-step.outputs.docker-name }}:${{ github.sha }}
          gcr.io/t0-qa-282516/${{ steps.docker-name-step.outputs.docker-name }}:latest
          gcr.io/t0-qa-282516/${{ steps.docker-name-step.outputs.docker-name }}:${{ inputs.epoch }}.${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        labels: |
          com.ymeadows.openapi=${{ steps.openapi.outputs.json }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.authors=${{ steps.get-author.outputs.author }}
    - name: Tag Git
      uses: hole19/git-tag-action@master
      env:
        TAG: v${{ inputs.epoch }}.${{ github.run_number }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Create Release
      uses: softprops/action-gh-release@69320dbe05506a9a39fc8ae11030b214ec2d1f87
      with:
          tag_name: v${{ inputs.epoch }}.${{ github.run_number }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
