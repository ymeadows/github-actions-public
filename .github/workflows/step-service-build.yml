# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build And Push Step Service

on:
  workflow_call:
    inputs:
      epoch:
        required: false
        default: 1
        description: 'The major version number of the step-service.'
        type: number
      repo-name:
        required: false
        description: 'The name of the repository.'
        type: string
      python-version:
        required: false
        description: 'The version of python used in build.'
        default: '3.10'
        type: string
    secrets:
      gcp-credentials:
        required: true
        description: 'The path to the GCP credentials file.'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        lfs: true
    - name: LFS Checkout
      run: git lfs checkout
    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: '${{ inputs.python-version }}'
        cache: 'pip'
    - name: Run setup.sh if it exists
      run: |
        if [ -f setup.sh ]; then bash setup.sh; fi
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 app --exclude __pycache__ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 app --exclude __pycache__ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Authenticate to Google Cloud
      id: 'auth'
      uses: 'google-github-actions/auth@7c6bc770dae815cd3e89ee6cdf493a5fab2cc093' # v3.0.0
      with:
        credentials_json: '${{ secrets.gcp-credentials }}'
    - name: Setup Google Cloud
      uses: google-github-actions/setup-gcloud@aa5489c8933f4cc7a4f7d45035b3b1440c9c10db # v3.0.1
      with:
        project_id: 't0-prod'
    - name: Setup Docker
      run: |-
        gcloud --quiet auth configure-docker
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
    - id: docker-name-step
      name: 'Derive Docker Name'
      uses: 'ymeadows/github-actions-public/.github/actions/derive-docker-name@main'
      with:
        repo-name: ${{ inputs.repo-name }}
    - name: Generate OpenAPI file with Python 3.13
      id: generate-openapi3_13
      uses: ymeadows/fastapi-openapi-specs-action@python3.13
      if: ${{ inputs.python-version == '3.13' }}
      continue-on-error: true
      with:
        moduleDir: app
        outputExtension: json
    - name: Generate OpenAPI file with Python 3.12
      id: generate-openapi3_12
      uses: ymeadows/fastapi-openapi-specs-action@python3.12
      if: ${{ inputs.python-version == '3.12' }}
      continue-on-error: true
      with:
        moduleDir: app
        outputExtension: json
    - name: Generate OpenAPI file with Python 3.11
      id: generate-openapi3_11
      uses: ymeadows/fastapi-openapi-specs-action@python3.11
      if: ${{ inputs.python-version != '3.12' && inputs.python-version != '3.13' }}
      continue-on-error: true
      with:
        moduleDir: app
        outputExtension: json
    - name: Fallback openapi.json
      if: ${{ steps.generate-openapi3_11.outcome != 'success' && steps.generate-openapi3_12.outcome != 'success' && steps.generate-openapi3_13.outcome != 'success' }}
      run: echo "{}" > openapi.json
    - name: Get openapi.json
      id: openapi
      run: echo "json=$(cat openapi.json)" >> $GITHUB_OUTPUT
    - name: Get first commit committer email
      id: get-author
      run: |
        FULL_EMAIL=$(git log --format='%ae' $(git rev-list --max-parents=0 HEAD))
        USERNAME=$(echo $FULL_EMAIL | cut -d'@' -f1)
        echo "author=$USERNAME" >> $GITHUB_OUTPUT
    - name: Build Docker Image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 #v6.18.0
      with:
        context: .
        push: false
        pull: true
        load: true
        tags: gcr.io/t0-prod/${{ steps.docker-name-step.outputs.docker-name }}:${{ inputs.epoch }}.${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        labels: |
          com.ymeadows.openapi=${{ steps.openapi.outputs.json }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.authors=${{ steps.get-author.outputs.author }}
    - name: Load Trivy configuration
      id: trivy-configuration
      run: |
        if [ -f scan-files-to-ignore.txt ]; then echo "files-to-ignore=$(cat scan-files-to-ignore.txt)" >> $GITHUB_OUTPUT; fi
        if [ -f scan-dirs-to-ignore.txt ]; then echo "dirs-to-ignore=$(cat scan-dirs-to-ignore.txt)" >> $GITHUB_OUTPUT; fi
    - id: write-global-trivyignore
      name: 'Write Global Trivy Ignore'
      uses: 'ymeadows/github-actions-public/.github/actions/append-steps-cve-ignore-list@main'
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@f9424c10c36e288d5fa79bd3dfd1aeb2d6eae808 #v0.33.0
      with:
        image-ref: 'gcr.io/t0-prod/${{ steps.docker-name-step.outputs.docker-name }}:${{ inputs.epoch }}.${{ github.run_number }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os'
        scanners: 'vuln,misconfig'
        skip-files: ${{ steps.trivy-configuration.outputs.files-to-ignore }}
        skip-dirs: ${{ steps.trivy-configuration.outputs.dirs-to-ignore }}
      env:
        # Use AWS' ECR mirror for the trivy-db image, as GitHub's Container
        # Registry is returning a TOOMANYREQUESTS error.
        # Ref: https://github.com/aquasecurity/trivy-action/issues/389
        TRIVY_DB_REPOSITORY: 'public.ecr.aws/aquasecurity/trivy-db:2'
    - name: Push Docker Image
      id: docker-push
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 #v6.18.0
      with:
        context: .
        push: true
        provenance: mode=max
        sbom: true
        tags: |
          gcr.io/t0-prod/${{ steps.docker-name-step.outputs.docker-name }}:${{ github.sha }}
          gcr.io/t0-prod/${{ steps.docker-name-step.outputs.docker-name }}:latest
          gcr.io/t0-prod/${{ steps.docker-name-step.outputs.docker-name }}:${{ inputs.epoch }}.${{ github.run_number }}
          gcr.io/t0-qa-282516/${{ steps.docker-name-step.outputs.docker-name }}:${{ github.sha }}
          gcr.io/t0-qa-282516/${{ steps.docker-name-step.outputs.docker-name }}:latest
          gcr.io/t0-qa-282516/${{ steps.docker-name-step.outputs.docker-name }}:${{ inputs.epoch }}.${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        labels: |
          com.ymeadows.openapi=${{ steps.openapi.outputs.json }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.authors=${{ steps.get-author.outputs.author }}
    - name: Tag Git
      uses: hole19/git-tag-action@0b717b660aa3ac0154c5c5e02d6153642cc64966 #v1
      env:
        TAG: v${{ inputs.epoch }}.${{ github.run_number }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Create Release
      uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 #v2.3.2
      with:
          tag_name: v${{ inputs.epoch }}.${{ github.run_number }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
